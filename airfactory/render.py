"""
Render the config into the read to run dag
"""
from datetime import datetime
from typing import Dict, Any

import jinja2

from airfactory.common.logger import LoggerMixing
from airfactory.core.yaml import YamlReader
from airfactory.dagfactory import AirlakeDagFactory

logger_factory = LoggerMixing()
logger_factory.logger.info("Render the config into the read to run dag")

DAG_TEMPLATE = jinja2.Template(
  """
'''
Generated by Airflow Datalake! Do not edit!
author: tuancamtbtx
Timestamp {{ timestamp }}
'''

from airflow import DAG

from airfactory.render import load_dag

conf = {{ json_conf }}
name = '{{ name }}'
load_dag(globals(), name, conf)
"""
)


def load_dag(globals, conf: Dict[str, Any]):
  """
  Load DAGs using the AirlakeDagFactory.

  Args:
      globals: The global namespace dictionary.
      conf: A dictionary containing configuration options.

  Returns:
      None
  """
  AirlakeDagFactory(
    config=conf
  ).generate_dags(globals)


class RenderToDagFile(LoggerMixing):
  def __init__(self, dag_repo, dag_config):
    self.dag_repo = dag_repo
    self.dag_config = dag_config

  def _get_yaml_path_config(self):
    return self.dag_repo + "/" + self.dag_config["name"] + ".py"

  def _load_config(self, config_filepath: str):
    yaml_reader = YamlReader()
    config = yaml_reader.read(
      path=config_filepath
    )
    return config

  @staticmethod
  def dump_to_py(name: str, conf: Dict[str, Any]):
    """Dumps configs from dict into python dag file"""
    return DAG_TEMPLATE.render(
      name=name,
      json_conf=conf,
      timestamp=datetime.now().astimezone().isoformat(),
    )

  def render(self, location: str):
    try:
      dag_conf = self._load_config(self.dag_config)
      self.logger.debug("Loading dag %s", dag_conf.name)
      self.logger.debug("[%s] Rendering Done!", dag_conf.name)
      return True
    except Exception as e:
      self.logger.error("RenderDAG %s Error: %s", dag_conf.name, e)
      return False
